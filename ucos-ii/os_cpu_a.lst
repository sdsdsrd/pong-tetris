


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       I
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                         (c) Copyright 2009-2013; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V2.92.09
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;             JBL
   17 00000000         ;
   18 00000000         ; For       : ARMv7 Cortex-M4
   19 00000000         ; Mode      : Thumb-2 ISA
   20 00000000         ; Toolchain : IAR EWARM
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         ;
   23 00000000         
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         
   28 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   29 00000000                 EXTERN           OSPrioCur
   30 00000000                 EXTERN           OSPrioHighRdy
   31 00000000                 EXTERN           OSTCBCur
   32 00000000                 EXTERN           OSTCBHighRdy
   33 00000000                 EXTERN           OSIntExit
   34 00000000                 EXTERN           OSTaskSwHook
   35 00000000                 EXTERN           OS_CPU_ExceptStkBase
   36 00000000         
   37 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   38 00000000                 EXPORT           OS_CPU_SR_Restore
   39 00000000                 EXPORT           OSStartHighRdy
   40 00000000                 EXPORT           OSCtxSw
   41 00000000                 EXPORT           OSIntCtxSw
   42 00000000                 EXPORT           OS_CPU_PendSVHandler
   43 00000000         
   44 00000000         
   45 00000000         
   46 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 2 


   47 00000000         ;                                               EQUATES
   48 00000000         ;*******************************************************
                       *************************************************
   49 00000000         
   50 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   51 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   52 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   53 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   54 00000000         
   55 00000000         
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   58 00000000         ;*******************************************************
                       *************************************************
   59 00000000         
   60 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   61 00000000                 THUMB
   62 00000000                 REQUIRE8
   63 00000000                 PRESERVE8
   64 00000000         
   65 00000000         ;*******************************************************
                       *************************************************
   66 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   67 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       OS_STK  *stkPtr)
   68 00000000         ;
   69 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   70 00000000         ;
   71 00000000         ;           2) Pseudo-code is:
   72 00000000         ;              a) Get FPSCR register value;
   73 00000000         ;              b) Push value on process stack;
   74 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   75 00000000         ;              d) Update OSTCBCur->OSTCBStkPtr;
   76 00000000         ;*******************************************************
                       *************************************************
   77 00000000         
   78 00000000         
   79 00000000         
   80 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 3 


   81 00000000         ;                                   FLOATING POINT REGIS
                       TERS POP
   82 00000000         ;                             void  OS_CPU_FP_Reg_Pop (O
                       S_STK  *stkPtr)
   83 00000000         ;
   84 00000000         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
   85 00000000         ;
   86 00000000         ;           2) Pseudo-code is:
   87 00000000         ;              a) Restore regs S0-S31 of new process sta
                       ck;
   88 00000000         ;              b) Restore FPSCR reg value
   89 00000000         ;              c) Update OSTCBHighRdy->OSTCBStkPtr point
                       er of new proces stack;
   90 00000000         ;*******************************************************
                       *************************************************
   91 00000000         
   92 00000000         
   93 00000000         ;*******************************************************
                       *************************************************
   94 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   95 00000000         ;
   96 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   97 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   98 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   99 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
  100 00000000         ;              into the CPU's status register.
  101 00000000         ;
  102 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
  103 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
  104 00000000         ;
  105 00000000         ;
  106 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
  107 00000000         ;
  108 00000000         ;                 void Task (void *p_arg)
  109 00000000         ;                 {
  110 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
  111 00000000         ;                     OS_CPU_SR  cpu_sr;
  112 00000000         ;                 #endif
  113 00000000         ;
  114 00000000         ;                          :
  115 00000000         ;                          :
  116 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  117 00000000         ;                          :
  118 00000000         ;                          :
  119 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  120 00000000         ;                          :
  121 00000000         ;                          :
  122 00000000         ;                 }



ARM Macro Assembler    Page 4 


  123 00000000         ;*******************************************************
                       *************************************************
  124 00000000         
  125 00000000         OS_CPU_SR_Save
  126 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  127 00000004 B672            CPSID            I
  128 00000006 4770            BX               LR
  129 00000008         
  130 00000008         OS_CPU_SR_Restore
  131 00000008 F380 8810       MSR              PRIMASK, R0
  132 0000000C 4770            BX               LR
  133 0000000E         
  134 0000000E         
  135 0000000E         ;*******************************************************
                       *************************************************
  136 0000000E         ;                                         START MULTITAS
                       KING
  137 0000000E         ;                                      void OSStartHighR
                       dy(void)
  138 0000000E         ;
  139 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  140 0000000E         ;              the first task to start.
  141 0000000E         ;
  142 0000000E         ;           2) OSStartHighRdy() MUST:
  143 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  144 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  145 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  146 0000000E         ;              d) Set OSRunning to TRUE;
  147 0000000E         ;              e) Trigger PendSV exception;
  148 0000000E         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  149 0000000E         ;*******************************************************
                       *************************************************
  150 0000000E         
  151 0000000E         OSStartHighRdy
  152 0000000E 481F            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  153 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  154 00000014 7001            STRB             R1, [R0]
  155 00000016         
  156 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  157 00000018 F380 8809       MSR              PSP, R0
  158 0000001C         
  159 0000001C 481C            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  160 0000001E 6801            LDR              R1, [R0]
  161 00000020 F381 8808       MSR              MSP, R1
  162 00000024         



ARM Macro Assembler    Page 5 


  163 00000024 481B            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  164 00000026 2101            MOVS             R1, #1
  165 00000028 7001            STRB             R1, [R0]
  166 0000002A         
  167 0000002A 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  168 0000002C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  169 00000030 6001            STR              R1, [R0]
  170 00000032         
  171 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  172 00000034         
  173 00000034         OSStartHang
  174 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  175 00000036         
  176 00000036         
  177 00000036         ;*******************************************************
                       *************************************************
  178 00000036         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  179 00000036         ;
  180 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  181 00000036         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  182 00000036         ;*******************************************************
                       *************************************************
  183 00000036         
  184 00000036         OSCtxSw
  185 00000036 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  186 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  187 0000003C 6001            STR              R1, [R0]
  188 0000003E 4770            BX               LR
  189 00000040         
  190 00000040         
  191 00000040         ;*******************************************************
                       *************************************************
  192 00000040         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  193 00000040         ;
  194 00000040         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  195 00000040         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  196 00000040         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  197 00000040         ;*******************************************************
                       *************************************************
  198 00000040         
  199 00000040         OSIntCtxSw
  200 00000040 4815            LDR              R0, =NVIC_INT_CTRL ; Trigger th



ARM Macro Assembler    Page 6 


                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  201 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  202 00000046 6001            STR              R1, [R0]
  203 00000048 4770            BX               LR
  204 0000004A         
  205 0000004A         
  206 0000004A         ;*******************************************************
                       *************************************************
  207 0000004A         ;                                       HANDLE PendSV EX
                       CEPTION
  208 0000004A         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  209 0000004A         ;
  210 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  211 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  212 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  213 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  214 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  215 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  216 0000004A         ;
  217 0000004A         ;           2) Pseudo-code is:
  218 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  219 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  220 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  221 0000004A         ;              d) Call OSTaskSwHook();
  222 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  223 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  224 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  225 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  226 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  227 0000004A         ;
  228 0000004A         ;           3) On entry into PendSV handler:
  229 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  230 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  231 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  232 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  233 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  234 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume



ARM Macro Assembler    Page 7 


  235 0000004A         ;
  236 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  237 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  238 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  239 0000004A         ;*******************************************************
                       *************************************************
  240 0000004A         
  241 0000004A         OS_CPU_PendSVHandler
  242 0000004A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  243 0000004C F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  244 00000050 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  245 00000052         
  246 00000052 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  247 00000054 E880 0FF0       STM              R0, {R4-R11}
  248 00000058         
  249 00000058 4910            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  250 0000005A 6809            LDR              R1, [R1]
  251 0000005C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  252 0000005E         
  253 0000005E         ; At this point, entire context of process has been save
                       d
  254 0000005E         OS_CPU_PendSVHandler_nosave
  255 0000005E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  256 00000060 480F            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  257 00000062 4780            BLX              R0
  258 00000064 F85D EB04       POP              {R14}
  259 00000068         
  260 00000068 480E            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  261 0000006A 490F            LDR              R1, =OSPrioHighRdy
  262 0000006C 780A            LDRB             R2, [R1]
  263 0000006E 7002            STRB             R2, [R0]
  264 00000070         
  265 00000070 480A            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  266 00000072 490E            LDR              R1, =OSTCBHighRdy
  267 00000074 680A            LDR              R2, [R1]
  268 00000076 6002            STR              R2, [R0]
  269 00000078         
  270 00000078 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  271 0000007A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr



ARM Macro Assembler    Page 8 


                                                            om new process stac
                                                            k
  272 0000007E 3020            ADDS             R0, R0, #0x20
  273 00000080 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  274 00000084 F04E 0EF4       ORR              LR, LR, #0xF4 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  275 00000088 B662            CPSIE            I
  276 0000008A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  277 0000008C         
  278 0000008C                 END
              E000ED22 
              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\os_
cpu_a.d -o.\os_cpu_a.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\
Keil\ARM\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --list=.\os_cpu_a.lst os_
cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 60 in file os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 184 in file os_cpu_a.asm
   Uses
      At line 40 in file os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 199 in file os_cpu_a.asm
   Uses
      At line 41 in file os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 173 in file os_cpu_a.asm
   Uses
      At line 174 in file os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 151 in file os_cpu_a.asm
   Uses
      At line 39 in file os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 0000004A

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 241 in file os_cpu_a.asm
   Uses
      At line 42 in file os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 0000005E

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 254 in file os_cpu_a.asm
   Uses
      At line 244 in file os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 130 in file os_cpu_a.asm
   Uses
      At line 38 in file os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 125 in file os_cpu_a.asm
   Uses
      At line 37 in file os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 50 in file os_cpu_a.asm
   Uses
      At line 167 in file os_cpu_a.asm
      At line 185 in file os_cpu_a.asm
      At line 200 in file os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 53 in file os_cpu_a.asm
   Uses
      At line 168 in file os_cpu_a.asm
      At line 186 in file os_cpu_a.asm
      At line 201 in file os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 52 in file os_cpu_a.asm
   Uses
      At line 153 in file os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 51 in file os_cpu_a.asm
   Uses
      At line 152 in file os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 33 in file os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 29 in file os_cpu_a.asm
   Uses
      At line 260 in file os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 30 in file os_cpu_a.asm
   Uses
      At line 261 in file os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 28 in file os_cpu_a.asm
   Uses
      At line 163 in file os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 31 in file os_cpu_a.asm
   Uses
      At line 249 in file os_cpu_a.asm
      At line 265 in file os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 32 in file os_cpu_a.asm
   Uses
      At line 266 in file os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 34 in file os_cpu_a.asm
   Uses
      At line 256 in file os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 35 in file os_cpu_a.asm
   Uses
      At line 159 in file os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
355 symbols in table
